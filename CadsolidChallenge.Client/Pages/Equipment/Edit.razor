@page "/equipment/add"
@page "/equipment/edit/{Id:int}"
@using CadsolidChallenge.Shared
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>@(IsEditMode ? "Editar Equipamento" : "Adicionar Equipamento")</h3>

<form method="post" @onsubmit="Save" @formname="SaveEquipment">
    <AntiforgeryToken />

    <div class="mb-3">
        <label>Nome:</label>
        <InputText class="form-control" @bind-Value="equipment.Name" />
    </div>

    <div class="mb-3">
        <label>Modelo:</label>
        <InputText class="form-control" @bind-Value="equipment.Model" />
    </div>

    @if (!string.IsNullOrEmpty(equipment.ImagemUrl))
    {
        <img src="@equipment.ImagemUrl" width="200" class="img-thumbnail mb-3" />
    }

    <div class="mb-3">
        <label>Imagem:</label>
        <InputFile OnChange="OnInputFileChange" />
    </div>

    <button class="btn btn-success" type="submit">Salvar</button>
    <a class="btn btn-secondary ms-2" href="/equipment">Cancelar</a>
</form>

@code {
    [Parameter] public int? Id { get; set; }

    Equipment equipment = new();
    bool IsEditMode => Id != null;
    IBrowserFile? image;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            equipment = await Http.GetFromJsonAsync<Equipment>($"api/equipments/{Id}");
        }
    }

    async Task Save()
    {
        if (IsEditMode)
            await Http.PutAsJsonAsync($"api/equipments/edit/{equipment.Id}", equipment);
        else
            await Http.PostAsJsonAsync("api/equipments/", equipment);

        Navigation.NavigateTo("/equipment");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        image = e.File;

        if (image != null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(image.OpenReadStream(maxAllowedSize: 10_000_000)); // 10 MB
            content.Add(fileContent, "file", image.Name);

            var response = await Http.PostAsync("api/equipamentos/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var imageUrl = await response.Content.ReadAsStringAsync();
                equipment.ImagemUrl = imageUrl;
            }
        }
    }

}
