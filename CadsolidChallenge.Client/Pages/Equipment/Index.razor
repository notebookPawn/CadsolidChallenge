@page "/equipment"
@using CadsolidChallenge.Shared
@inject HttpClient Http

<h3>Lista de Equipamentos</h3>

<a class="btn btn-primary mb-3" href="/equipment/add">Adicionar Equipamento</a>

@if (equipments == null)
{
    <p><em>A carregar...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Modelo</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eq in equipments)
            {
                <tr>
                    <td>@eq.Name</td>
                    <td>@eq.Model</td>
                    <td>
                        <a class="btn btn-sm btn-success" href="/equipment/details/@eq.Id">Detalhes</a>
                        <a class="btn btn-sm btn-warning" href="/equipment/edit/@eq.Id">Editar</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => ApagarEquipamento(eq.Id)">Apagar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Equipment>? equipments;

    protected override async Task OnInitializedAsync() => equipments = await Http.GetFromJsonAsync<List<Equipment>>("api/equipments");

    async Task ApagarEquipamento(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar?");
        if (confirmed)
        {
            await Http.DeleteAsync($"api/equipments/{id}");
            equipments = await Http.GetFromJsonAsync<List<Equipment>>("api/equipments");
        }
    }

    [Inject] IJSRuntime JS { get; set; } = default!;
}