@page "/equipments/add"
@page "/equipments/edit/{Id:int}"
@using CadsolidChallenge.Shared
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>@(IsEditMode ? "Editar Equipamento" : "Adicionar Equipamento")</h3>

<form method="post" @onsubmit="Save" @formname="SaveEquipment">
    <AntiforgeryToken />

    <div class="mb-3">
        <label>Nome:</label>
        <InputText class="form-control" @bind-Value="equipment.Name" />
    </div>

    <div class="mb-3">
        <label>Modelo:</label>
        <InputText class="form-control" @bind-Value="equipment.Model" />
    </div>

    @if (!string.IsNullOrEmpty(equipment.ImagemUrl))
    {
        <img src="@equipment.ImagemUrl" width="200" class="img-thumbnail mb-3" />
    }

    <div class="mb-3">
        <label>Imagem:</label>
        <InputFile OnChange="OnInputFileChange" />
    </div>

    <div class="mb-3">
        <label>Data de Início de Avalibilidade:</label>
        <InputDate @bind-Value="inicialDate" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Data de Fim de Avalibilidade:</label>
        <InputDate @bind-Value="endDate" class="form-control" />
    </div>
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-danger">@validationMessage</div>
    }
    <button class="btn btn-success" type="submit">Salvar</button>
    <a class="btn btn-secondary ms-2" href="/">Cancelar</a>
</form>

@code {
    [Parameter] public int? Id { get; set; }

    Equipment equipment = new();
    bool IsEditMode => Id != null;
    IBrowserFile? image;
    MultipartFormDataContent content = new MultipartFormDataContent();
    DateTime inicialDate, endDate;
    string validationMessage;

    protected override async Task OnInitializedAsync()
    {
            if (IsEditMode)
            {
                equipment = await Http.GetFromJsonAsync<Equipment>($"api/equipments/{Id}");
                inicialDate = equipment.Availability.inicialDate;
                endDate = equipment.Availability.endDate;
            }
            else
            {
                inicialDate = DateTime.Now;
                endDate = DateTime.Now.AddDays(1);
            }

    }

    async Task Save()
    {
        if (checkTime())
        {
            if (IsEditMode)
            {
                equipment.Availability.inicialDate = inicialDate;
                equipment.Availability.endDate = endDate;
                await Http.PutAsJsonAsync($"api/equipments/edit/{equipment.Id}", equipment);
                Navigation.NavigateTo("/");
            }

            else
            {
                content.Add(new StringContent(equipment.Name), "Name");
                content.Add(new StringContent(equipment.Model), "Model");
                content.Add(new StringContent(inicialDate.ToString("yyyy-MM-dd")), "inicialDate");
                content.Add(new StringContent(endDate.ToString("yyyy-MM-dd")), "endDate");


                var response = await Http.PostAsync("api/equipments", content);

                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Error");
                }
                Navigation.NavigateTo("/");
            }
        }
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        image = e.File;

        if (image != null && equipment.Id != 0)
        {
            var fileContent = new StreamContent(image.OpenReadStream(maxAllowedSize: 10_000_000));
            content.Add(fileContent, "file", image.Name);

            var response = await Http.PostAsync($"api/equipments/{equipment.Id}/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var imageUrl = await response.Content.ReadAsStringAsync();
                equipment.ImagemUrl = imageUrl;
            }

        }
        else if (equipment.Id == 0)
        {
            var fileContent = new StreamContent(image.OpenReadStream(maxAllowedSize: 10_000_000));
            content.Add(fileContent, "image", image.Name);
        }
    }

    private bool checkTime()
    {
        if (inicialDate >= endDate)
        {
            // Exibe uma mensagem ou bloqueia o envio
            validationMessage = "A data de início deve ser anterior à data de fim.";
            return false;
        }
        return true;
    }

}
